AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - logging-poc
      - predev
      - dev
      - staging
      - prod
    Description: Environment
    Microservice:
      Type: String
      AllowedValues: 
        - elk
      Description: Microservice Name
  ELKResourceCFMName:
    Type: String
    Description: ELK resource CFM stack name
  KafkaBrokers:
    Type: String
    Description: Kafka brokers endpoints
  KafkaZookeepers:
    Type: String
    Description: Kafka zookeeper endpoints
  ESDomainName:
    Type: String
    Description: Elasticsearch Domain Name
  LogstashConfigBucketName:
    Type: String
    Description: Name of Bucket that contains logstash bucket
  UbuntuAMI :
    Type: AWS::EC2::Image::Id
    Description: Image for Kafka Client and Logstash machines
  KafkaClientInstanceType:
    Type: String
    Description: Instance type for Kafka Client
  LogstashInstanceType:
    Type: String
    Description: Instance type for Logstash instane
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Can contain only ASCII characters.
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet Id
  ESDomainName:
    Type: String
    Description: ES Domain name
  MSKClusterName:
    Type: String
    Description: MSK Cluster Name
  SnsTopicArn:
      Type: String
      Description: Arn of SNS topic to notify to
  MSKBrokerIDList:
      Type: CommaDelimitedList
      Description: List all MSK Broker IDs
  

Mappings: 
  CommonServiceMeta: 
    us-east-1: 
      name: "us-e1"
    us-east-2: 
      name: "us-e2"
Resources:
  KafkaClientEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref KafkaClientInstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      SubnetId: !Select 
        - 0
        - !Ref Subnets
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub "${ELKResourceCFMName}-KafkaClientSecurityGroupId"
      ImageId: !Ref UbuntuAMI
      Tags:
        - Key: Name
          Value: KafkaClientInstance
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash

            apt-get update -y
            apt-get install -y openjdk-8-jre

            cd /home/ubuntu

            mkdir kafka

            cd kafka

            wget https://archive.apache.org/dist/kafka/2.2.1/kafka_2.12-2.2.1.tgz

            tar -xzf kafka_2.12-2.2.1.tgz

            cd kafka_2.12-2.2.1

            /home/ubuntu/kafka/kafka_2.12-2.2.1/bin/kafka-topics.sh --zookeeper ${KafkaZookeepers} --create --topic unmaskedTopic --partitions 6 --replication-factor 3
            /home/ubuntu/kafka/kafka_2.12-2.2.1/bin/kafka-topics.sh --zookeeper ${KafkaZookeepers} --create --topic maskedTopic  --partitions 6 --replication-factor 3
        
  LogstashLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref LogstashInstanceType
        KeyName: !Ref KeyName
        ImageId: !Ref UbuntuAMI
        IamInstanceProfile:
          Arn:
            Fn::ImportValue:
              !Sub "${ELKResourceCFMName}-LogstashInstanceProfileArn"
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${ELKResourceCFMName}-LogstashSecurityGroupId"
        UserData: 
          Fn::Base64:
            !Sub |
              #!/bin/bash

              apt-get update -y

              apt-get install -y openjdk-8-jre

              cp /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/cacerts /home/ubuntu/kafka.client.truststore.jks

              apt install -y awscli

              wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
              apt-get install -y apt-transport-https
              echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list
              apt-get update -y && apt-get install -y logstash
              /usr/share/logstash/bin/logstash-plugin install logstash-output-amazon_es
              /usr/share/logstash/bin/logstash-plugin install logstash-codec-json

              aws s3 sync s3://${LogstashConfigBucketName}/logstash-configs /home/ubuntu/logstash-configs

              mv  /home/ubuntu/logstash-configs/pipelines.yml /etc/logstash/pipelines.yml

              cp /home/ubuntu/logstash-configs/* /etc/logstash/conf.d/
              
              echo "MASKER_INPUT_TOPIC=\"unmaskedTopic\"" >> /etc/default/logstash
              echo "MASKER_OUTPUT_TOPIC=\"maskedTopic\"" >> /etc/default/logstash
              echo "MASKER_CONSUMER_GROUP_ID=\"masker-consumer\"" >> /etc/default/logstash
              echo "MASKER_CONSUMER_THREADS=2" >> /etc/default/logstash
              echo "MASKER_INPUT_BROKERS=\""${KafkaBrokers}"\"" >> /etc/default/logstash
              echo "MASKER_OUTPUT_BROKERS=\""${KafkaBrokers}"\"" >> /etc/default/logstash

              echo "ES_SYNC_INPUT_TOPIC=\"maskedTopic\"" >> /etc/default/logstash
              echo "ES_SYNC_CONSUMER_GROUP_ID=\"es-sync-consumer\"" >> /etc/default/logstash
              echo "ES_SYNC_CONSUMER_THREADS=2" >> /etc/default/logstash
              echo "ES_SYNC_INPUT_BROKERS=\""${KafkaBrokers}"\"" >> /etc/default/logstash
              echo "ES_DOMAIN_NAME=\""${ESDomainName}"\"" >> /etc/default/logstash
              echo "ES_REGION=\""${AWS::Region}"\"" >> /etc/default/logstash
              echo "ES_INDEX=\"cb-application-logs\"" >> /etc/default/logstash

              echo "S3_INPUT_TOPIC=\"maskedTopic\"" >> /etc/default/logstash
              echo "S3_CONSUMER_GROUP_ID=\"s3-sync-consumer\"" >> /etc/default/logstash
              echo "S3_CONSUMER_THREADS=2" >> /etc/default/logstash
              echo "S3_REGION=\""${AWS::Region}"\"" >> /etc/default/logstash
              echo "S3_INPUT_BROKERS=\""${KafkaBrokers}"\"" >> /etc/default/logstash
              echo "S3_BUCKET_NAME=\""${ESDomainName}"\"" >> /etc/default/logstash

              systemctl restart logstash

      LaunchTemplateName:
        Fn::Sub: 
          - cb-${Environment}-${RegionId}-${Microservice}-logstash-launch-template
          - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}

  LogstashASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName:
        Fn::Sub: 
          - cb-${Environment}-${RegionId}-${Microservice}-logstash-asg
          - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
      MinSize: "0"
      MaxSize: "3"
      DesiredCapacity: "0"
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref LogstashLaunchTemplate
        Version: !GetAtt LogstashLaunchTemplate.DefaultVersionNumber
      VPCZoneIdentifier: !Ref Subnets
  
  #Alarms

  MSKDataLogsDiskUsedBroker1:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: High Disk Usage for storing Data
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-disk-used-alarm-1
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: KafkaDataLogsDiskUsed
        Namespace: AWS/Kafka
        Statistic: Average
        Period: 300
        EvaluationPeriods: 3
        Threshold: 70
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 0
          - !Ref MSKBrokerIDList
MSKDataLogsDiskUsedBroker2:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: High Disk Usage for storing Data
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-disk-used-alarm-2
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: KafkaDataLogsDiskUsed
        Namespace: AWS/Kafka
        Statistic: Average
        Period: 300
        EvaluationPeriods: 3
        Threshold: 70
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 1
          - !Ref MSKBrokerIDList
MSKDataLogsDiskUsedBroker3:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: High Disk Usage for storing Data
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-disk-used-alarm-3
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: KafkaDataLogsDiskUsed
        Namespace: AWS/Kafka
        Statistic: Average
        Period: 300
        EvaluationPeriods: 3
        Threshold: 70
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 2
          - !Ref MSKBrokerIDList

#MSK CPU alarms
MSKIdleCPUAlarmsBroker1:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: Idle CPU for the broker
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-cpu-idle-alarm-1
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: CpuIdle
        Namespace: AWS/Kafka
        Statistic: Average
        Period: 300
        EvaluationPeriods: 3
        Threshold: 30
        ComparisonOperator: LessThanOrEqualToThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 0
          - !Ref MSKBrokerIDList
MSKIdleCPUAlarmsBroker2:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: Idle CPU for the broker
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-cpu-idle-alarm-2
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: CpuIdle
        Namespace: AWS/Kafka
        Statistic: Average
        Period: 300
        EvaluationPeriods: 3
        Threshold: 30
        ComparisonOperator: LessThanOrEqualToThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 1
          - !Ref MSKBrokerIDList
MSKIdleCPUAlarmsBroker3:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: Idle CPU for the broker
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-cpu-idle-alarm-3
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: CpuIdle
        Namespace: AWS/Kafka
        Statistic: Average
        Period: 300
        EvaluationPeriods: 3
        Threshold: 30
        ComparisonOperator: LessThanOrEqualToThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 2
          - !Ref MSKBrokerIDList

MSKUnderReplicatedParitionAlarmsBroker1:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: Under Replicated Paritions for the broker
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-under-replicated-parition-alarm-1
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: UnderReplicatedPartitions
        Namespace: AWS/Kafka
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 3
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 0
          - !Ref MSKBrokerIDList

MSKUnderReplicatedParitionAlarmsBroker2:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: Under Replicated Paritions for the broker
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-under-replicated-parition-alarm-2
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: UnderReplicatedPartitions
        Namespace: AWS/Kafka
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 3
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 1
          - !Ref MSKBrokerIDList
    
  MSKUnderReplicatedParitionAlarmsBroker3:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: Under Replicated Paritions for the broker
        AlarmName:
            Fn::Sub:
                - cb-${Environment}-${RegionId}-${Microservice}-msk-under-replicated-parition-alarm-3
                - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
        AlarmActions:
        - Ref: SnsTopicArn
        MetricName: UnderReplicatedPartitions
        Namespace: AWS/Kafka
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 3
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
        - Name: "Cluster Name"
          Value: !Ref MSKClusterName
        - Name: "Broker ID"
          Value: !Select 
          - 2
          - !Ref MSKBrokerIDList
          



#Elasticsearch Alarms
        
ESClusterRedStatusAlarm:
 Type: AWS::CloudWatch::Alarm
 #DeletionPolicy: Retain
 Properties:
   AlarmDescription: At least one primary shard and its replicas are not allocated to a node
   AlarmName:
     Fn::Sub:
       - cb-${Environment}-${RegionId}-${Microservice}-es-cluster-red-status-alarm
       - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
   AlarmActions:
   - Ref: SnsTopicArn
   MetricName: ClusterStatus.red
   Namespace: AWS/ES
   Statistic: Maximum
   Period: 60
   EvaluationPeriods: 1
   Threshold: 1
   ComparisonOperator: GreaterThanOrEqualToThreshold
   Dimensions:
     - Name: "DomainName"
       Value: !Ref ESDomainName
     - Name: "ClientId" 
       Value: !Ref "AWS::AccountId"

ESClusterYellowStatusAlarm:
 Type: AWS::CloudWatch::Alarm
 #DeletionPolicy: Retain
 Properties:
   AlarmDescription: At least one replica shard is not allocated to a node
   AlarmName:
     Fn::Sub:
       - cb-${Environment}-${RegionId}-${Microservice}-es-cluster-yellow-status-alarm
       - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
   AlarmActions:
   - Ref: SnsTopicArn
   MetricName: ClusterStatus.yellow
   Namespace: AWS/ES
   Statistic: Maximum
   Period: 60
   EvaluationPeriods: 1
   Threshold: 1
   ComparisonOperator: GreaterThanOrEqualToThreshold
   Dimensions:
     - Name: "DomainName"
       Value: !Ref ESDomainName
     - Name: "ClientId" 
       Value: !Ref "AWS::AccountId"

ESFreeStorageSpaceAlarm:
  Type: AWS::CloudWatch::Alarm
  #DeletionPolicy: Retain
  Properties:
      AlarmDescription: Alarm when freespace goes down to 40GiB or less
      AlarmName:
          Fn::Sub:
              - cb-${Environment}-${RegionId}-${Microservice}-es-freestorage-alarm
              - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
      AlarmActions:
      - Ref: SnsTopicArn
      MetricName: FreeStorageSpace
      Namespace: AWS/ES
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 40960
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: "DomainName"
        Value: !Ref ESDomainName
      - Name: "ClientId" 
        Value: !Ref "AWS::AccountId"

ESCPUUtilizationAlarm:
  Type: AWS::CloudWatch::Alarm
  #DeletionPolicy: Retain
  Properties:
      AlarmDescription: Continuous high CPU utilization
      AlarmName:
          Fn::Sub:
              - cb-${Environment}-${RegionId}-${Microservice}-es-cpu-utilization-alarm
              - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
      AlarmActions:
      - Ref: SnsTopicArn
      MetricName: CPUUtilization
      Namespace: AWS/ES
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: "DomainName"
        Value: !Ref ESDomainName
      - Name: "ClientId" 
        Value: !Ref "AWS::AccountId"

ESClusterBlockExceptionAlarm:
  Type: AWS::CloudWatch::Alarm
  #DeletionPolicy: Retain
  Properties:
      AlarmDescription: Continuous high CPU utilization
      AlarmName:
          Fn::Sub:
              - cb-${Environment}-${RegionId}-${Microservice}-es-cluster-block-alarm
              - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
      AlarmActions:
      - Ref: SnsTopicArn
      MetricName: ClusterIndexWritesBlocked
      Namespace: AWS/ES
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: "DomainName"
        Value: !Ref ESDomainName
      - Name: "ClientId" 
        Value: !Ref "AWS::AccountId"

ESJVMMemoryPressureAlarm:
  Type: AWS::CloudWatch::Alarm
  #DeletionPolicy: Retain
  Properties:
      AlarmDescription: High JVM Memory usage for extended period of time
      AlarmName:
          Fn::Sub:
              - cb-${Environment}-${RegionId}-${Microservice}-es-jvm-memory-alarm
              - { RegionId: !FindInMap [CommonServiceMeta, !Ref "AWS::Region", name]}
      AlarmActions:
      - Ref: SnsTopicArn
      MetricName: JVMMemoryPressure
      Namespace: AWS/ES
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 3
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: "DomainName"
        Value: !Ref ESDomainName
      - Name: "ClientId" 
        Value: !Ref "AWS::AccountId"

